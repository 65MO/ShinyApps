newoccpix <- indpixto[sample.int(length(indpixto), 1)]
r.occ[newoccpix] <- 1
r.occ[oldoccpix] <- 0
# transaction committed !
nbpixswapped <- nbpixswapped + 1
}
else {
freepixavailable <- FALSE
# no more free pixels on land ... release all occupied water pixels
r.occ[indpixfrom] <- 0
}
}
else {
waterpixoccupied <- FALSE
}
}
print("** STEP 3 - OVER **")
print(Sys.time())
# occupied pixels get value '2' in r.land raster
r.land[r.occ == 1] <- 2
colortable(r.land) <- coltab
# plot + write raster
png(filename=paste0("/Users/loulou/Travail/R-Spatial/map_", nbpixswapped, "_3swapped.png"))
plot(r.land)
dev.off()
writeRaster(r.land, filename=paste0("/Users/loulou/Travail/R-Spatial/Iter_", nbpixswapped, "swap.tif"),overwrite=TRUE)
?<<-
a<<-4
a
b<-5
c<<-b
a<-3
a<<-4
install.packages("rmarkdown")
5630+12100
5630+12100+12730+9120+13420+12100+8580
library(sp)
library(maptools)
library(rgeos)
spptsdf<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour")
library(rgdal)
spptsdf<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour")
v_id <- spptsdf$ID
?numric
?numeric
?"integer"
v_id <- as.integer(spptsdf$ID)
?sort
?order
order(v_id)
spptsdf[order(v_id),]
spptsdf_sort <- spptsdf[order(v_id),]
spptsdf_jourN <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 1',]
?"SpatialLines"
?Lines
l <- Lines(Line(spptsdf_jourN@coords), jourN)
jourN <- 'Jour 1'
spptsdf_jourN <- spptsdf_sort[spptsdf_sort$NUMERO == jourN,]
l <- Lines(Line(spptsdf_jourN@coords), jourN)
sl <- SpatialLines(l, proj4string=spptsdf@proj4string)
l <- Lines(list(Line(spptsdf_jourN@coords)), jourN)
sl <- SpatialLines(list(l), proj4string=spptsdf@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=jourN)
spldf <- SpatialLinesDataFrame(sl, df)
spptsdf_jour1 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 1',]
spptsdf_jour2 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 2',]
spptsdf_jour3 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 3',]
spptsdf_jour4 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 4',]
spptsdf_jour5 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 5',]
spptsdf_jour6 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 6',]
spptsdf_jour7 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 7',]
l1 <- Lines(list(Line(spptsdf_jour1@coords)), 'Jour 1')
l2 <- Lines(list(Line(spptsdf_jour2@coords)), 'Jour 2')
l3 <- Lines(list(Line(spptsdf_jour3@coords)), 'Jour 3')
l4 <- Lines(list(Line(spptsdf_jour4@coords)), 'Jour 4')
l5 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 5')
l6 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 6')
l7 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 7')
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7'))
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour", driver="ESRI Shapefile")
spptsdf_jour1 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 1',]
spptsdf_jour2 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 2',]
spptsdf_jour3 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 3',]
spptsdf_jour4 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 4',]
spptsdf_jour5 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 5',]
spptsdf_jour6 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 6',]
spptsdf_jour7 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 7',]
l1 <- Lines(list(Line(spptsdf_jour1@coords)), 'Jour 1')
l2 <- Lines(list(Line(spptsdf_jour2@coords)), 'Jour 2')
l3 <- Lines(list(Line(spptsdf_jour3@coords)), 'Jour 3')
l4 <- Lines(list(Line(spptsdf_jour4@coords)), 'Jour 4')
l5 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 5')
l6 <- Lines(list(Line(spptsdf_jour6@coords)), 'Jour 6')
l7 <- Lines(list(Line(spptsdf_jour7@coords)), 'Jour 7')
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7'))
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour2", driver="ESRI Shapefile")
spptsdf<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour")
v_id <- as.integer(spptsdf$IDINT)
spptsdf_sort <- spptsdf[order(v_id),]
spptsdf_jour1 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 1',]
spptsdf_jour2 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 2',]
spptsdf_jour3 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 3',]
spptsdf_jour4 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 4',]
spptsdf_jour5 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 5',]
spptsdf_jour6 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 6',]
spptsdf_jour7 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 7',]
l1 <- Lines(list(Line(spptsdf_jour1@coords)), 'Jour 1')
l2 <- Lines(list(Line(spptsdf_jour2@coords)), 'Jour 2')
l3 <- Lines(list(Line(spptsdf_jour3@coords)), 'Jour 3')
l4 <- Lines(list(Line(spptsdf_jour4@coords)), 'Jour 4')
l5 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 5')
l6 <- Lines(list(Line(spptsdf_jour6@coords)), 'Jour 6')
l7 <- Lines(list(Line(spptsdf_jour7@coords)), 'Jour 7')
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7'))
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour3", driver="ESRI Shapefile")
spptsdf$IDINT
spptsdf<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour")
v_id <- as.integer(spptsdf$IDINT)
spptsdf<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour")
v_id <- as.integer(spptsdf$IDINT)
library(sp)
library(maptools)
library(rgeos)
library(rgdal)
spptsdf<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour")
v_id <- as.integer(spptsdf$IDINT)
spptsdf$IDINT
spptsdf2<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour2")
v_id <- as.integer(spptsdf2$IDINT)
spptsdf2$IDINT
spptsdf_sort <- spptsdf[order(v_id),]
spptsdf_sort$IDINT
spptsdf_sort <- spptsdf2[order(v_id),]
spptsdf_sort$IDINT
spptsdf_jour1 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 1',]
spptsdf_jour2 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 2',]
spptsdf_jour3 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 3',]
spptsdf_jour4 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 4',]
spptsdf_jour5 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 5',]
spptsdf_jour6 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 6',]
spptsdf_jour7 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 7',]
l1 <- Lines(list(Line(spptsdf_jour1@coords)), 'Jour 1')
l2 <- Lines(list(Line(spptsdf_jour2@coords)), 'Jour 2')
l3 <- Lines(list(Line(spptsdf_jour3@coords)), 'Jour 3')
l4 <- Lines(list(Line(spptsdf_jour4@coords)), 'Jour 4')
l5 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 5')
l6 <- Lines(list(Line(spptsdf_jour6@coords)), 'Jour 6')
l7 <- Lines(list(Line(spptsdf_jour7@coords)), 'Jour 7')
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7'))
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour4", driver="ESRI Shapefile")
library(sp)
library(maptools)
library(rgeos)
library(rgdal)
spptsdf2<-readOGR("/Users/loulou/Travail/GIS_DATA","pts_mercantour2")
v_id <- as.integer(spptsdf2$IDINT)
spptsdf2$IDINT
spptsdf_sort <- spptsdf2[order(v_id),]
spptsdf_sort$IDINT
spptsdf_jour1 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 1',]
spptsdf_jour2 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 2',]
spptsdf_jour3 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 3',]
spptsdf_jour4 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 4',]
spptsdf_jour5 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 5',]
spptsdf_jour6 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 6',]
spptsdf_jour7 <- spptsdf_sort[spptsdf_sort$NUMERO == 'Jour 7',]
l1 <- Lines(list(Line(spptsdf_jour1@coords)), 'Jour 1')
l2 <- Lines(list(Line(spptsdf_jour2@coords)), 'Jour 2')
l3 <- Lines(list(Line(spptsdf_jour3@coords)), 'Jour 3')
l4 <- Lines(list(Line(spptsdf_jour4@coords)), 'Jour 4')
l5 <- Lines(list(Line(spptsdf_jour5@coords)), 'Jour 5')
l6 <- Lines(list(Line(spptsdf_jour6@coords)), 'Jour 6')
l7 <- Lines(list(Line(spptsdf_jour7@coords)), 'Jour 7')
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7'))
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour5", driver="ESRI Shapefile")
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf2@proj4string)
df <- data.frame("LONGUEUR"=SpatialLinesLengths(sl,F), row.names=c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7'))
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour5", driver="ESRI Shapefile")
JOURS <- c('Jour 1','Jour 2','Jour 3','Jour 4','Jour 5','Jour 6','Jour 7')
sl <- SpatialLines(list(l1,l2,l3,l4,l5,l6,l7), proj4string=spptsdf2@proj4string)
df <- data.frame(JOURS, LONGUEUR=SpatialLinesLengths(sl,F), row.names=JOURS)
spldf <- SpatialLinesDataFrame(sl, df)
writeOGR(spldf, "/Users/loulou/Travail/GIS_DATA", "lines_mercantour6", driver="ESRI Shapefile")
update.packages()
update.packages()
.libPaths()
install.packages("shiny", repos='https://cran.rstudio.com/')
install.packages("leaflet")
update.packages()
install.packages("leaflet")
install.packages("shiny")
shinyApp
shinyApp()
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
output$responses <- renderDataTable({
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- renderDataTable({
input$submit
loadData()
})
}
)
?dataTableOutput
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
dataTableOutput("responses"), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
dataTableOutput("responses"), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Save a response
# ---- This is one of the two functions we will change for every storage type ----
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
# Load all previous responses
# ---- This is one of the two functions we will change for every storage type ----
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
dataTableOutput("responses"), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- renderDataTable({
input$submit
loadData()
})
}
)
shiny::runApp('Travail/R-Spatial/Shiny')
shiny::runApp('Travail/R-Spatial/Shiny')
shiny::runApp('Desktop/IT117_LONLAT/AppLeaflet')
?dataTableOutput
runApp('Travail/R-Spatial/Shiny')
?tableOutput
runApp('Travail/R-Spatial/Shiny')
runApp('Travail/R-Spatial/Shiny')
runApp('Travail/R-Spatial/Shiny/AppLeaflet2')
shiny::runApp('Travail/R-Spatial/ShinyApps/HRApp')
library(sp)
library(rgdal)
library(adehabitatHR)
library(sp)
library(rgdal)
library(adehabitatHR)
setwd("/Users/loulou/Travail/R-Spatial/ShinyApps/HRApp")
df <- read.table("www/test_IT117.txt", header=T, sep="\t")
m <- as.matrix(df[,c("LON","LAT")])
m2 <- matrix(nrow = 0,ncol=2)
?SpatialPoints
?spTransform
relocs_wgs84 <- SpatialPoints(m,proj4string=CRS("+init=EPSG:4326"))
relocs <- spTransform(relocs_wgs84, CRS("+init=EPSG:32631"))
relocs@bbox
relocs@bbox[,2]
relocs@bbox[,2] - relocs@bbox[,1]
res <- 100
width_height <- ceiling((relocs@bbox[,2] - relocs@bbox[,1]) / res)
width_height <- floor((relocs@bbox[,2] - relocs@bbox[,1]) / res)
?kernelUD
?SpatialPixels
?`SpatialPixels-class`
?HexPoints2SpatialPolygons
?makegrid
mg <- makegrid(relocs, cellsize=100)
mg['out.attrs']
567*770
568*771
?SpatialPixels
coordinates(mg) <- ~x1+x2
pixg <- SpatialPixels(mg)
floor(relocs@bbox[,2] - relocs@bbox[,1])
relocs@bbox
pixg@bbox
sqrt(15071)
quantile(relocs@coords[,1],c(0.2,0.8))
quantile(relocs@coords[,2],c(0.2,0.8))
quantile(relocs@coords[,1:2],c(0.2,0.8))
quantile(relocs@coords[,c(1,2)],c(0.2,0.8))
width <- quantile(relocs@coords[,1],c(0.2,0.8))
height <- quantile(relocs@coords[,2],c(0.2,0.8))
?range
width <- range(quantile(relocs@coords[,1],c(0.2,0.8)))
?round
width[2]-width[1]
height[2]-height[1]
width <- quantile(relocs@coords[,1],c(0.2,0.8))
height <- quantile(relocs@coords[,2],c(0.2,0.8))
width <- quantile(relocs@coords[,1],c(0.2,0.8))
width[2]-width[1]
height[2]-height[1]
?pretty
?prettyNum
prettyNum(164.21)
pretty(164.21)
pretty(1264.21)
?pretty
10^(floor(log10(1644.48)))
10^(floor(log10(164.48)))
log10(1244)
log10(244)
log10(2244)
pretty(1224,4)
pretty(768,1224)
dim(relocs@coords)[1]
res <- sqrt(dim(relocs@coords)[1])
res
spixg <- SpatialPixels(mg)
Sys.time()
t0 <- Sys.time()
KUD <- kernelUD(relocs, grid=spixg, h="href")
Sys.time() - t0
VUD <- getvolumeUD(KUD)
library(raster)
Raster_VUD <- raster(VUD)
vIsolignes <- seq(50, 95, 5)
Shapefile_Isolignes <- rasterToContour(Raster_VUD,levels=vIsolignes)
?addPolylines
library(leaflet)
?addPolylines
leaflet() %>% addTiles() %>% addPolylines(data=Shapefile_Isolignes2)
proj4string(Shapefile_Isolignes) <- CRS("+init=EPSG:32631")
Shapefile_Isolignes2 <- spTransform(Shapefile_Isolignes, CRS("+init=EPSG:4326"))
leaflet() %>% addTiles() %>% addPolylines(data=Shapefile_Isolignes2)
leaflet() %>% addTiles() %>% addPolylines(data=Shapefile_Isolignes)
leaflet() %>% addTiles() %>% addPolylines(data=Shapefile_Isolignes2)
writeOGR(Shapefile_Isolignes2,'.','iso117','ESRI Shapefile')
Shapefile_Isolignes3 <- spTransform(Shapefile_Isolignes, CRS("+init=EPSG:3857"))
leaflet() %>% addTiles() %>% addPolylines(data=Shapefile_Isolignes3)
leaflet() %>% addTiles() %>% addPolylines(data=Shapefile_Isolignes2)
Shapefile_Isolignes3 <- spTransform(Shapefile_Isolignes2, CRS("+init=EPSG:3857"))
writeOGR(Shapefile_Isolignes3,'.','iso117_PSMERC','ESRI Shapefile')
shiny::runApp()
runApp()
?kernelUD
?withProgress
?kernelUD
?getverticeshr
